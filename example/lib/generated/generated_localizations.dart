// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by Excel Translator
// 2025-09-04 18:03:08.641531

import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:excel_translator/excel_translator.dart';
import 'dart:ui' show PlatformDispatcher;
import 'login_localizations.dart';
import 'buttons_localizations.dart';

class AppLocalizations {
  final String languageCode;

  static const List<String> supportedLanguages = [
    'en',
    'es',
    'id',
  ];

  late final LoginLocalizations login;
  late final ButtonsLocalizations buttons;

  AppLocalizations(this.languageCode) {
    login = LoginLocalizations(languageCode);
    buttons = ButtonsLocalizations(languageCode);
  }

  /// Get english instance
  static AppLocalizations get en => AppLocalizations('en');
  /// Get spanish instance
  static AppLocalizations get es => AppLocalizations('es');
  /// Get indonesian instance
  static AppLocalizations get id => AppLocalizations('id');

  static AppLocalizations get english => AppLocalizations('en');
  static AppLocalizations get spanish => AppLocalizations('es');
  static AppLocalizations get indonesian => AppLocalizations('id');

  static AppLocalizations of(BuildContext context) {
    final locale = Localizations.localeOf(context);
    return AppLocalizations(locale.languageCode);
  }

  /// Get system language with fallback
  static String getSystemLanguage() {
    try {
      // Try to get from Flutter's PlatformDispatcher first
      final locales = PlatformDispatcher.instance.locales;
      if (locales.isNotEmpty) {
        final locale = locales.first.languageCode.toLowerCase();
        if (supportedLanguages.contains(locale)) {
          return locale;
        }
      }
    } catch (e) {
      // Fall back to other methods if PlatformDispatcher fails
    }

    // Final fallback to English
    return 'en';
  }

  /// Get current localization based on system language
  static AppLocalizations get current => AppLocalizations(getSystemLanguage());

  /// Delegate for localizations
  static const AppLocalizationsDelegate delegate = AppLocalizationsDelegate();

  /// All localization delegates including Flutter's built-in delegates
  static const List<LocalizationsDelegate<dynamic>> delegates = [
    delegate, // Custom localizations
    GlobalMaterialLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
  ];

}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) {
    return AppLocalizations.supportedLanguages.contains(locale.languageCode);
  }

  @override
  Future<AppLocalizations> load(Locale locale) async {
    return AppLocalizations(locale.languageCode);
  }

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
