// Individual sheet class generator
import 'dart:io';
import 'package:path/path.dart' as path;
import '../../data/models/models.dart';
import '../../core/string_utils.dart';

/// Generator for individual sheet localizations classes
class SheetClassGenerator {
  /// Generate individual sheet class
  static Future<void> generate(
    LocalizationSheet sheet,
    String outputDir,
  ) async {
    final buffer = StringBuffer();
    final className = '${StringUtils.capitalize(sheet.name)}Localizations';

    // Add generation comment
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by Excel Translator');
    buffer.writeln('// ${DateTime.now()}');
    buffer.writeln();

    buffer.writeln('class $className {');
    buffer.writeln('  final String _languageCode;');
    buffer.writeln();
    buffer.writeln('  const $className(this._languageCode);');
    buffer.writeln();

    // Generate methods for each key
    for (final entry in sheet.entries) {
      final methodName = StringUtils.sanitizeMethodName(entry.key);

      // Add comment for the translation key
      buffer.writeln('  /// Translation for key: ${entry.key}');

      // Check if the entry has interpolation
      final hasInterpolation = entry.translations.values.any(
        (value) => StringUtils.hasInterpolation(value),
      );

      if (hasInterpolation) {
        // Generate method with parameters
        final params =
            StringUtils.extractInterpolationParams(entry.translations.values.first);
        final paramList = params.map((p) => 'dynamic $p').join(', ');

        buffer.writeln('  String $methodName({$paramList}) {');
        buffer.writeln('    switch (_languageCode) {');

        for (final languageCode in sheet.languageCodes) {
          final translation = entry.translations[languageCode] ?? '';
          buffer.writeln("      case '$languageCode':");
          buffer.writeln("        return '''$translation'''");

          // Add interpolation replacements
          for (final param in params) {
            buffer.writeln(
                "            .replaceAll('{$param}', $param.toString())");
          }
          buffer.writeln("            ;");
        }

        buffer.writeln("      default:");
        final defaultTranslation = entry.translations.values.first;
        buffer.writeln("        return '''$defaultTranslation'''");
        for (final param in params) {
          buffer.writeln(
              "            .replaceAll('{$param}', $param.toString())");
        }
        buffer.writeln("            ;");
        buffer.writeln('    }');
        buffer.writeln('  }');
      } else {
        // Generate simple getter
        buffer.writeln('  String get $methodName {');
        buffer.writeln('    switch (_languageCode) {');

        for (final languageCode in sheet.languageCodes) {
          final translation = entry.translations[languageCode] ?? '';
          buffer.writeln("      case '$languageCode':");
          buffer.writeln("        return '''$translation''';");
        }

        buffer.writeln("      default:");
        final defaultTranslation = entry.translations.values.first;
        buffer.writeln("        return '''$defaultTranslation''';");
        buffer.writeln('    }');
        buffer.writeln('  }');
      }
      buffer.writeln();
    }

    buffer.writeln('}');

    final file = File(path.join(outputDir, '${sheet.name}_localizations.dart'));
    await file.writeAsString(buffer.toString());
  }
}
